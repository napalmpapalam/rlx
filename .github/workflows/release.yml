on:
  push:
    tags:
      - "rust_v*" # Run when tag matches rust_v*, i.e. rust_v1.0, rust_v20.15.10

name: Release Rust Binary and NPM Package

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RELEASE_BIN: rlx
  RELEASE_DIR: artifacts
  WORKING_DIR: ./
  GITHUB_REF: "${{ github.ref }}"
  MACOS_TARGET: x86_64-apple-darwin
  LINUX_TARGET: x86_64-unknown-linux-musl
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos-arm, macos-intel]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
          - build: macos-arm
            os: macos-14
            rust: stable
          - build: macos-intel
            os: macos-13
            rust: stable

    steps:
      - uses: actions/checkout@v1

      - name: Cache Cargo registry
        uses: actions/cache@v1
        if: matrix.rust
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.build }}-stable-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-stable-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v1
        if: matrix.rust
        with:
          path: ~/.cargo/git
          key: ${{ matrix.build }}-stable-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-stable-cargo-index-

      - name: Cache Cargo build
        uses: actions/cache@v1
        if: matrix.rust
        with:
          path: target/release
          key: ${{ matrix.build }}-stable-release-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-stable-release-target-

      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:15}"
          echo ::set-output name=version::"${GITHUB_REF:15}"

      - name: Install Rust
        if: matrix.rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}

      - name: Install musl-tools (Linux)
        if: matrix.build == 'linux'
        run: |
          sudo apt-get update -
          sudo apt-get install musl-tools pkg-config libssl-dev -y

      - name: Install p7zip (MacOS-arm)
        if: matrix.build == 'macos-arm'
        run: brew install p7zip

      - name: Install p7zip (MacOS-intel)
        if: matrix.build == 'macos-intel'
        run: brew install p7zip

      - name: Build (Linux)
        if: matrix.build == 'linux'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          rustup target add ${{ env.LINUX_TARGET }}
          cargo build --release --target ${{ env.LINUX_TARGET }}

      - name: Build (MacOS-arm)
        if: matrix.build == 'macos-arm'
        working-directory: ${{ env.WORKING_DIR }}
        run: cargo build --release

      - name: Build (MacOS-intel)
        if: matrix.build == 'macos-intel'
        working-directory: ${{ env.WORKING_DIR }}
        run: cargo build --release

      - name: Create artifact directory
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          mkdir ${{ env.RELEASE_DIR }}
          mkdir dist

      - name: Create tarball (Linux)
        if: matrix.build == 'linux'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          mv ./target/${{ env.LINUX_TARGET }}/release/${{ env.RELEASE_BIN }} ./dist/${{ env.RELEASE_BIN }}
          7z a -ttar -so -an ./dist | 7z a -si ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_TARGET }}.tar.gz

      - name: Create tarball (MacOS-arm)
        if: matrix.build == 'macos-arm'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          mv ./target/release/${{ env.RELEASE_BIN }} ./dist/${{ env.RELEASE_BIN }}
          7z a -ttar -so -an ./dist | 7z a -si ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}-arm64.tar.gz

      - name: Create tarball (MacOS-intel)
        if: matrix.build == 'macos-intel'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          mv ./target/release/${{ env.RELEASE_BIN }} ./dist/${{ env.RELEASE_BIN }}
          7z a -ttar -so -an ./dist | 7z a -si ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}-x64.tar.gz

      - name: Upload Zip
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.build }}
          path: ./${{ env.WORKING_DIR }}/${{ env.RELEASE_DIR }}

  release:
    name: Github Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:15}"
          echo ::set-output name=version::"${GITHUB_REF:15}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: rust_${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ steps.get_version.outputs.VERSION }}

      - name: Download Linux tarball
        uses: actions/download-artifact@v1
        with:
          name: linux

      - name: Download MacOS-arm tarball
        uses: actions/download-artifact@v1
        with:
          name: macos-arm

      - name: Download MacOS-intel tarball
        uses: actions/download-artifact@v1
        with:
          name: macos-intel

      - name: Release Linux tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_TARGET }}.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_TARGET }}.tar.gz

      - name: Release MacOS-arm tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-arm/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}-arm64.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}-arm64.tar.gz

      - name: Release MacOS-intel tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-intel/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}-x64.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_TARGET }}-x64.tar.gz

  npm_publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4
      # Setup .npmrc file to publish to npm
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
      - run: |
          cp README.md ./npm
          cp LICENSE ./npm
          cd ./npm
          npm ci
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
