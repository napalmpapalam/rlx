name: Clippy check

on: [push]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Make sure CI fails on all warnings, including Clippy lints
env:
  RUSTFLAGS: "-Dwarnings"
  CARGO_TERM_COLOR: always
  WORKING_DIR: ./
  GITHUB_REF: "${{ github.ref }}"
  WINDOWS_TARGET: x86_64-pc-windows-msvc
  MACOS_TARGET: x86_64-apple-darwin
  LINUX_TARGET: x86_64-unknown-linux-musl

jobs:
  clippy_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features

  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos-arm, macos-intel, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
          - build: macos-arm
            os: macos-14
            rust: stable
          - build: macos-intel
            os: macos-13
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable

    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        if: matrix.rust
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.build }}-stable-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-stable-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v4
        if: matrix.rust
        with:
          path: ~/.cargo/git
          key: ${{ matrix.build }}-stable-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-stable-cargo-index-

      - name: Cache Cargo build
        uses: actions/cache@v4
        if: matrix.rust
        with:
          path: target/release
          key: ${{ matrix.build }}-stable-release-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-stable-release-target-

      - name: Install Rust
        if: matrix.rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}

      - name: Install musl-tools (Linux)
        if: matrix.build == 'linux'
        run: |
          sudo apt-get update -
          sudo apt-get install musl-tools

      - name: Build (Linux)
        if: matrix.build == 'linux'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          rustup target add ${{ env.LINUX_TARGET }}
          cargo build --release --target ${{ env.LINUX_TARGET }}

      - name: Build (MacOS-arm)
        if: matrix.build == 'macos-arm'
        working-directory: ${{ env.WORKING_DIR }}
        run: cargo build --release

      - name: Build (MacOS-intel)
        if: matrix.build == 'macos-intel'
        working-directory: ${{ env.WORKING_DIR }}
        run: cargo build --release

      - name: Build (Windows)
        if: matrix.build == 'windows'
        working-directory: ${{ env.WORKING_DIR }}
        run: cargo build --release
        env:
          RUSTFLAGS: -Ctarget-feature=+crt-static
